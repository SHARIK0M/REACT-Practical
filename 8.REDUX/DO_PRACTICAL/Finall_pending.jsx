// ðŸ“Œ Mini Tasks
// âœ… Create counter with auto-increment (0â€“10) and decrement (10â€“0)
// âœ… Setup Redux store
// âœ… Write Redux middleware
// âœ… Use useSelector, useReducer in function components
// âœ… Use mapStateToProps, mapDispatchToProps in class components
// âœ… Handle async calls with createAsyncThunk
// âœ… Secure API calls with JWT & middleware
// âœ… Implement Redux Thunk and Redux Saga
// âœ… Emulate useEffect lifecycle with Redux

// ðŸ“Œ Projects
// âœ… To-Do App using Redux Toolkit
// âœ… Counter using Redux
// âœ… Counter using Redux Thunk
// âœ… Middleware to log JWT
// âœ… Setup Redux DevTools
// âœ… Protected routes with Redux
// âœ… Add redux-thunk, redux-saga middleware
// âœ… Search + pagination
// âœ… Backend search with Redux-managed state
// âœ… Replace useState with useReducer
// âœ… Async actions using createAsyncThunk
// âœ… State update on user action
// âœ… Child â†’ Parent communication via Redux
// âœ… Clear state on logout
// âœ… Use redux-persist
// âœ… Manage loading/error with Redux Toolkit
// âœ… Practical use of extraReducers


// ðŸ”¹ 1. Setting Up Redux
// âž¤ From Scratch

// Setup Redux in vanilla JS or React

// How store holds data, usage of dispatch, subscribe, getState

// Dynamic reducer replacement

// âž¤ With Redux Toolkit

// Use configureStore()

// Create slice with createSlice()

// Use extraReducers, multiple middleware

// How Immer handles immutability

// ðŸ”¹ 2. Working with Actions and Reducers
// Write and dispatch actions

// Reducer rules (pure function)

// Create higher-order reducers

// Binding action creators to components

// ðŸ”¹ 3. Async Logic and Middleware
// Perform API calls with middleware

// Use Redux Thunk for async actions

// Use middleware for logging or error reporting

// Redux Saga: setup, usage, comparison with Thunk

// ðŸ”¹ 4. Advanced Redux Toolkit Usage
// Normalize data with createEntityAdapter

// Memoize with createSelector

// Side effects with createListenerMiddleware

// Async payload structure with createAsyncThunk

// Combine slices and flows

// ðŸ”¹ 5. Debugging and Best Practices
// Debug Redux flow

// Tools: Redux DevTools, LogRocket

// Clean code & architecture practices

// State normalization, middleware patterns

// ðŸ”¹ 6. Other Integrations
// Access Redux store outside components

// JWT auth integration

// Refreshing expired tokens securely

